package su.nightexpress.excellentjobs.job.listener;

import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockFertilizeEvent;
import org.bukkit.event.block.BlockFormEvent;
import org.bukkit.event.entity.CreatureSpawnEvent;
import org.bukkit.event.entity.EntityTransformEvent;
import org.jetbrains.annotations.NotNull;
import su.nightexpress.excellentjobs.JobsPlugin;
import su.nightexpress.excellentjobs.Placeholders;
import su.nightexpress.excellentjobs.config.Config;
import su.nightexpress.excellentjobs.job.JobManager;
import su.nightexpress.nightcore.manager.AbstractListener;
import su.nightexpress.nightcore.util.BukkitThing;
import su.nightexpress.nightcore.util.blocktracker.PlayerBlockTracker;

import java.util.Set;

public class JobExploitListener extends AbstractListener<JobsPlugin> {

    public JobExploitListener(@NotNull JobsPlugin plugin) {
        super(plugin);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchEntitySpawn(CreatureSpawnEvent event) {
        if (Config.ABUSE_IGNORE_SPAWN_REASONS.get().contains(event.getSpawnReason())) {
            JobManager.devastateEntity(event.getEntity());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchEntityTransform(EntityTransformEvent event) {
        if (JobManager.isDevastated(event.getEntity())) {
            event.getTransformedEntities().forEach(JobManager::devastateEntity);
            JobManager.devastateEntity(event.getTransformedEntity());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchBlockFertilize(BlockFertilizeEvent event) {
        Block block = event.getBlock();
        Set<String> badBlocks = Config.ABUSE_IGNORE_FERTILIZED.get();

        boolean isBadBlock = badBlocks.contains(Placeholders.WILDCARD) || badBlocks.contains(BukkitThing.toString(block.getType()));

        event.getBlocks().forEach(blockState -> {
            if (isBadBlock) {
                PlayerBlockTracker.trackForce(blockState.getBlock());
            }
            else {
                PlayerBlockTracker.unTrack(blockState.getBlock());
            }
        });
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onGlitchBlockGeneration(BlockFormEvent event) {
        if (Config.ABUSE_IGNORE_BLOCK_GENERATION.get().contains(event.getNewState().getType())) {
            this.plugin.runTask(() -> PlayerBlockTracker.trackForce(event.getBlock()));
        }
    }
}
